Kernel command line: -q -f put syn-write put child-syn-wrt run syn-write
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  157,081,600 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 226 sector (113 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
(syn-write) exec child 5 of 10: "child-syn-wrt 4"
(syn-write) exec child 6 of 10: "child-syn-wrt 5"
(syn-write) exec child 7 of 10: "child-syn-wrt 6"
(syn-write) exec child 8 of 10: "child-syn-wrt 7"
(syn-write) exec child 9 of 10: "child-syn-wrt 8"
(syn-write) exec child 10 of 10: "child-syn-wrt 9"
(syn-write) wait for child 1 of 10 returned 69328296 (expected 0)
(syn-write) wait for child 1 of 10 returned 69328296 (expected 0): FAILED
syn-write: exit(1)
Page fault at 0x18: not present error reading page in kernel context.
Interrupt 0x0e (#PF Page-Fault Exception) at rip=8004208242
 cr2=0000000000000018 error=               0
rax 0000000000000000 rbx 0000000000000000 rcx 0000000000000000 rdx 000000000000001f
rsp 0000008004241e00 rbp 0000008004241e20 rsi 0000008004241028 rdi 0000008004242048
rip 0000008004208242 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 00000080042410d8 rflags 00000202
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:100 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x800421875f 0x800421d325 0x800421d4a4 0x8004209540 0x800420995e 0x800420aaaa 0x800420bd53 0x800420be57 0x800420d050 0x800421bf58 0x800420777c.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 99 ticks
Thread: 30 idle ticks, 62 kernel ticks, 7 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 132 reads, 512 writes
hd1:0: 226 reads, 0 writes
Console: 2520 characters output
Key